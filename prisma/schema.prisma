// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid())
  email        String    @unique @map("correo")
  password     String    @map("contrasena")
  avatar       String?   @map("avatar") // this will be a url
  isActive     Boolean   @default(true) @map("esta_activo")
  loginAttemps Int       @default(0) @map("intentos_login")
  createdAt    DateTime  @default(now()) @map("creado_en")
  updatedAt    DateTime  @updatedAt @map("modificado_en")
  deletedAt    DateTime? @map("eliminado_en")

  roles   UserRole[]
  person  Person?
  company Company?

  recomendationId String?
  recomendation   Recomendation? @relation(fields: [recomendationId], references: [id])

  @@map("mnt_usuario")
}

model UserRole {
  userId    String    @map("usuario_id")
  user      User      @relation(fields: [userId], references: [id])
  role      Role      @relation(fields: [roleId], references: [id])
  roleId    String    @map("rol_id")
  createdAt DateTime  @default(now()) @map("creado_en")
  updatedAt DateTime  @updatedAt @map("modificado_en")
  deletedAt DateTime? @map("eliminado_en")

  @@id([roleId, userId])
  @@map("mnt_usuario_rol")
}

model Role {
  id          String          @id @default(uuid())
  name        String          @unique @map("nombre")
  description String?         @map("descripcion")
  createdAt   DateTime        @default(now()) @map("creado_en")
  updatedAt   DateTime        @updatedAt @map("modificado_en")
  deletedAt   DateTime?       @map("eliminado_en")
  users       UserRole[]
  permissions RolPermission[]

  @@map("mnt_rol")
}

model RolPermission {
  roleId       String     @map("rol_id")
  role         Role       @relation(fields: [roleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId String     @map("permiso_id")
  createdAt    DateTime   @default(now()) @map("creado_en")
  updatedAt    DateTime   @updatedAt @map("modificado_en")
  deletedAt    DateTime?  @map("eliminado_en")

  @@id([roleId, permissionId])
  @@map("mnt_rol_permiso")
}

model Permission {
  id          String          @id @default(uuid())
  name        String          @map("nombre")
  description String?         @map("descripcion")
  codename    String          @map("codigo")
  createdAt   DateTime        @default(now()) @map("creado_en")
  updatedAt   DateTime        @updatedAt @map("modificado_en")
  deletedAt   DateTime?       @map("eliminado_en")
  roles       RolPermission[]

  @@map("mnt_permiso")
}

model Person {
  id             String    @id @default(uuid())
  birthday       DateTime  @map("fecha_nacimiento")
  firstName      String    @map("primer_nombre")
  middleName     String?   @map("segundo_nombre")
  lastName       String    @map("primer_apellido")
  secondLastName String?   @map("segundo_apellido")
  gender         String    @map("genero")
  phone          String?   @map("telefono")
  createdAt      DateTime  @default(now()) @map("creado_en")
  updatedAt      DateTime  @updatedAt @map("modificado_en")
  deletedAt      DateTime? @map("eliminado_en")

  userId        String          @unique
  user          User            @relation(fields: [userId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  candidateId   String?         @unique()
  candidate     Candidate?      @relation(fields: [candidateId], references: [id])
  recruiterId   String?         @unique
  recruiter     Recruiter?      @relation(fields: [recruiterId], references: [id])
  documents     Document[]
  socialNetwork SocialNetwork[]
  address       Address?

  @@map("mnt_persona")
}

model Document {
  id     String @id @default(uuid())
  type   String @map("tipo") // Enum: pasaporte, dui, nup, nit
  number String @map("numero")

  personId  String    @map("persona_id")
  person    Person    @relation(fields: [personId], references: [id])
  createdAt DateTime  @default(now()) @map("creado_en")
  updatedAt DateTime  @updatedAt @map("modificado_en")
  deletedAt DateTime? @map("eliminado_en")

  @@map("mnt_documento")
}

model Address {
  id          String    @id @default(uuid())
  street      String    @map("calle")
  numberHouse String    @map("numero_casa")
  createdAt   DateTime  @default(now()) @map("creado_en")
  updatedAt   DateTime  @updatedAt @map("modificado_en")
  deletedAt   DateTime? @map("eliminado_en")

  personId       String?       @unique
  person         Person?       @relation(fields: [personId], references: [id])
  departmentId   String?
  department     Department?   @relation(fields: [departmentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  municipalityId String?
  municipality   Municipality? @relation(fields: [municipalityId], references: [id])
  countryId      String
  country        Country       @relation(fields: [countryId], references: [id])

  @@map("mnt_direccion")
}

model Country {
  id        String    @id @default(uuid())
  name      String    @unique @map("nombre")
  areaCode  String    @map("codigo")
  createdAt DateTime  @default(now()) @map("creado_en")
  updatedAt DateTime  @updatedAt @map("modificado_en")
  deletedAt DateTime? @map("eliminado_en")
  Address   Address[]
  companies Company[]

  @@map("ctl_pais")
}

model Department {
  id        String    @id @default(uuid())
  name      String    @unique @map("nombre")
  codename  String    @unique @map("codigo")
  createdAt DateTime  @default(now()) @map("creado_en")
  updatedAt DateTime  @updatedAt @map("modificado_en")
  deletedAt DateTime? @map("eliminado_en")

  municipalities Municipality[]
  address        Address[]

  @@map("ctl_departamento")
}

model Municipality {
  id        String    @id @default(uuid())
  name      String    @unique @map("nombre")
  codename  String    @unique @map("codigo")
  createdAt DateTime  @default(now()) @map("creado_en")
  updatedAt DateTime  @updatedAt @map("modificado_en")
  deletedAt DateTime? @map("eliminado_en")

  departmentId String
  department   Department @relation(fields: [departmentId], references: [id])
  address      Address[]

  @@map("ctl_municipio")
}

// New entities and catalogs (Revisar)
model SocialNetwork {
  id        String    @id @default(uuid())
  nickname  String    @map("nombre_usuario")
  url       String    @map("direccion_url")
  createdAt DateTime  @default(now()) @map("creado_en")
  updatedAt DateTime  @updatedAt @map("modificado_en")
  deletedAt DateTime? @map("eliminado_en")

  personId String
  person   Person @relation(fields: [personId], references: [id])

  typeSocialNetworkId String
  typeSocialNetwork   TypeSocialNetwork @relation(fields: [typeSocialNetworkId], references: [id])

  @@map("mnt_persona_red_social")
}

model TypeSocialNetwork {
  id        String    @id @default(uuid())
  name      String    @map("nombre")
  createdAt DateTime  @default(now()) @map("creado_en")
  updatedAt DateTime  @updatedAt @map("modificado_en")
  deletedAt DateTime? @map("eliminado_en")

  socialNetwork SocialNetwork[]

  @@map("ctl_tipo_red_social")
}

// Everything entities relacionship on Candidate
model Candidate {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now()) @map("creado_en")
  updatedAt DateTime  @updatedAt @map("modificado_en")
  deletedAt DateTime? @map("eliminado_en")

  person             Person?
  laboralExperiences LaboralExperience[]
  academicKnowledges AcademicKnowledge[]
  certifications     Certification[]
  technicalSkills    TechnicalSkillCandidate[]
  languageSkills     LanguageSkill[]
  recognitions       Recognition[]
  publications       Publication[]
  participations     Participation[]
  tests              Test[]
  recomendations     Recomendation[]
  jobApplications    JobApplication[]

  @@map("mnt_cantidato")
}

model LaboralExperience {
  id                String    @id @default(uuid())
  name              String    @map("nombre_puesto")
  organizationName  String    @map("nombre_organizacion")
  initDate          DateTime  @map("fecha_de_inicio")
  finishDate        DateTime? @map("fecha_de_finalizacion")
  currentJob        Boolean   @map("trabajo_actual")
  functionPerformed String    @map("funciones_desempe√±adas")

  createdAt DateTime  @default(now()) @map("creado_en")
  updatedAt DateTime  @updatedAt @map("modificado_en")
  deletedAt DateTime? @map("eliminado_en")

  candidateId           String
  candidate             Candidate            @relation(fields: [candidateId], references: [id])
  organizationContactId String?              @unique
  organizationContact   OrganizationContact? @relation(fields: [organizationContactId], references: [id])

  @@map("mnt_experiencia_laboral")
}

model OrganizationContact {
  id        String    @id @default(uuid())
  phone     String?   @map("telefono_organizacion")
  email     String?   @map("correo_organizacion")
  createdAt DateTime  @default(now()) @map("creado_en")
  updatedAt DateTime  @updatedAt @map("modificado_en")
  deletedAt DateTime? @map("eliminado_en")

  laboralExperience LaboralExperience?

  @@map("mnt_contacto_organizacion")
}

model AcademicKnowledge {
  id               String    @id @default(uuid())
  name             String    @map("nombre_conocimiento")
  type             String    @map("tipo_conocimiento_academico") // Enum: titulo, diplomas, cursos
  initDate         DateTime  @map("fecha_de_inicio")
  finishDate       DateTime? @map("fecha_de_finalizacion")
  organizationName String    @map("nombre_institucion")
  createdAt        DateTime  @default(now()) @map("creado_en")
  updatedAt        DateTime  @updatedAt @map("modificado_en")
  deletedAt        DateTime? @map("eliminado_en")

  candidateId String
  candidate   Candidate @relation(fields: [candidateId], references: [id])

  @@map("mnt_conocimiento_academico")
}

model Certification {
  id               String    @id @default(uuid())
  initDate         DateTime  @map("fecha_de_inicio")
  finishDate       DateTime  @map("fecha_de_finalizacion")
  name             String    @map("nombre_certificacion")
  type             String    @map("tipo_certificacion")
  code             String?   @map("codigo_certificacion")
  organizationName String    @map("nombre_organizacion")
  createdAt        DateTime  @default(now()) @map("creado_en")
  updatedAt        DateTime  @updatedAt @map("modificado_en")
  deletedAt        DateTime? @map("eliminado_en")

  candidateId String
  candidate   Candidate @relation(fields: [candidateId], references: [id])

  @@map("mnt_certificacion")
}

model TechnicalSkillCandidate {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now()) @map("creado_en")
  updatedAt DateTime  @updatedAt @map("modificado_en")
  deletedAt DateTime? @map("eliminado_en")

  technicalSkillId String         @unique()
  technicalSkill   TechnicalSkill @relation(fields: [technicalSkillId], references: [id])
  candidateId      String
  candidate        Candidate      @relation(fields: [candidateId], references: [id])

  @@map("mnt_habilidad_tecnica_candidato")
}

model TechnicalSkill {
  id        String    @id @default(uuid())
  name      String    @map("nombre_habilidad_tecnica")
  createdAt DateTime  @default(now()) @map("creado_en")
  updatedAt DateTime  @updatedAt @map("modificado_en")
  deletedAt DateTime? @map("eliminado_en")

  technicalSkillCandidates TechnicalSkillCandidate[]
  categoryTechnicalSkillId String
  categoryTechnicalSkill   CategoryTechnicalSkill?   @relation(fields: [categoryTechnicalSkillId], references: [id])
  jobPosition              JobPosition[]

  @@map("ctl_habilidad_tecnica")
}

model CategoryTechnicalSkill {
  id        String    @id @default(uuid())
  name      String    @map("nombre_categoria_habilidad_tecnica")
  createdAt DateTime  @default(now()) @map("creado_en")
  updatedAt DateTime  @updatedAt @map("modificado_en")
  deletedAt DateTime? @map("eliminado_en")

  technicalSkill TechnicalSkill[]

  @@map("ctl_categoria")
}

model LanguageSkill {
  id        String    @id @default(uuid())
  skill     String    @map("habilidad_lenguaje") // Enum: Escucha, lectura, escritura y conversacion
  level     String    @map("nivel_lenguaje") // Enum: A1, A2, B1, B2, C1, C2
  createdAt DateTime  @default(now()) @map("creado_en")
  updatedAt DateTime  @updatedAt @map("modificado_en")
  deletedAt DateTime? @map("eliminado_en")

  languageId String   @unique
  language   Language @relation(fields: [languageId], references: [id])

  candidateId String
  candidate   Candidate @relation(fields: [candidateId], references: [id])

  @@map("mnt_habilidad_lenguaje")
}

model Language {
  id        String    @id @default(uuid())
  language  String    @map("idioma")
  createdAt DateTime  @default(now()) @map("creado_en")
  updatedAt DateTime  @updatedAt @map("modificado_en")
  deletedAt DateTime? @map("eliminado_en")

  languageSkills LanguageSkill[]
  jobPosition    JobPosition[]

  @@map("ctl_idioma")
}

model Recognition {
  id         String    @id @default(uuid())
  name       String    @map("nombre_reconocimiento")
  finishDate DateTime  @map("fecha_finalizacion")
  createdAt  DateTime  @default(now()) @map("creado_en")
  updatedAt  DateTime  @updatedAt @map("modificado_en")
  deletedAt  DateTime? @map("eliminado_en")

  recognitionTypeId String          @unique
  recognitionType   RecognitionType @relation(fields: [recognitionTypeId], references: [id])

  candidateId String
  candidate   Candidate @relation(fields: [candidateId], references: [id])

  @@map("mnt_reconocimiento")
}

model RecognitionType {
  id        String    @id @default(uuid())
  name      String    @map("nombre_tipo_reconocimiento")
  createdAt DateTime  @default(now()) @map("creado_en")
  updatedAt DateTime  @updatedAt @map("modificado_en")
  deletedAt DateTime? @map("eliminado_en")

  recognitions Recognition[]

  @@map("ctl_tipo_reconocimiento")
}

model Publication {
  id        String    @id @default(uuid())
  name      String    @map("nombre_publicacion")
  place     String    @map("lugar_publicacion")
  type      String    @map("tipo_publicacion") // Enum: articulo, libro
  edition   String?   @map("edicion") // edition and isbn will be requires if type = libro
  isbn      String?   @map("isbn")
  createdAt DateTime  @default(now()) @map("creado_en")
  updatedAt DateTime  @updatedAt @map("modificado_en")
  deletedAt DateTime? @map("eliminado_en")

  candidateId String
  candidate   Candidate @relation(fields: [candidateId], references: [id])

  @@map("mnt_publicacion")
}

model Participation {
  id        String    @id @default(uuid())
  date      DateTime  @map("fecha_participacion")
  place     String    @map("lugar_participacion")
  country   String    @map("pais_participacion")
  eventHost String    @map("anfitrion_evento")
  createdAt DateTime  @default(now()) @map("creado_en")
  updatedAt DateTime  @updatedAt @map("modificado_en")
  deletedAt DateTime? @map("eliminado_en")

  participationTypeId String            @unique
  participationType   ParticipacionType @relation(fields: [participationTypeId], references: [id])

  candidateId String
  candidate   Candidate @relation(fields: [candidateId], references: [id])

  @@map("mnt_participacion")
}

model ParticipacionType {
  id        String    @id @default(uuid())
  name      String    @map("nombre_tipo_participacion")
  createdAt DateTime  @default(now()) @map("creado_en")
  updatedAt DateTime  @updatedAt @map("modificado_en")
  deletedAt DateTime? @map("eliminado_en")

  participations Participation[]

  @@map("ctl_tipo_participacion")
}

model Test {
  id        String    @id @default(uuid())
  result    Boolean   @map("resultado")
  urlDocs   String    @map("url_archivo")
  createdAt DateTime  @default(now()) @map("creado_en")
  updatedAt DateTime  @updatedAt @map("modificado_en")
  deletedAt DateTime? @map("eliminado_en")

  testTypeId String   @unique
  test       TestType @relation(fields: [testTypeId], references: [id])

  candidateId String
  candidate   Candidate @relation(fields: [candidateId], references: [id])

  @@map("mnt_prueba")
}

model TestType {
  id        String    @id @default(uuid())
  name      String    @map("nombre_tipo_prueba")
  createdAt DateTime  @default(now()) @map("creado_en")
  updatedAt DateTime  @updatedAt @map("modificado_en")
  deletedAt DateTime? @map("eliminado_en")

  tests Test[]

  @@map("ctl_tipo_prueba")
}

model Recomendation {
  id            String    @id @default(uuid())
  type          String    @map("tipo") // this is ENUM and contain two options: Laboral and personal
  recomendation String?   @map("recomendacion")
  createdAt     DateTime  @default(now()) @map("creado_en")
  updatedAt     DateTime  @updatedAt @map("modificado_en")
  deletedAt     DateTime? @map("eliminado_en")

  candidateId String
  candidate   Candidate @relation(fields: [candidateId], references: [id])

  users User[]

  @@map("mnt_recomendacion")
}

model Recruiter {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now()) @map("creado_en")
  updatedAt DateTime  @updatedAt @map("modificado_en")
  deletedAt DateTime? @map("eliminado_en")

  jobPosition JobPosition[]
  companies   CompanyRecruiter[]

  persons Person?

  @@map("mnt_reclutador")
}

model JobPosition {
  id            String    @id @default(uuid())
  salarialRange String    @map("rango_salarial")
  modality      String    @map("modalidad") // Enum: presencial, semipresencial, remoto
  location      String    @map("ubicacion")
  description   String    @map("descripcion")
  createdAt     DateTime  @default(now()) @map("creado_en")
  updatedAt     DateTime  @updatedAt @map("modificado_en")
  deletedAt     DateTime? @map("eliminado_en")

  recruiterId String
  recruiter   Recruiter @relation(fields: [recruiterId], references: [id])
  companyId   String
  company     Company   @relation(fields: [companyId], references: [id])

  requirement     Requirement[]
  jobApplications JobApplication[]
  language        Language[]
  technicalSkill  TechnicalSkill[]

  @@map("mnt_puesto_de_trabajo")
}

model Requirement {
  id          String    @id @default(uuid())
  description String    @map("descripcion_requisito")
  createdAt   DateTime  @default(now()) @map("creado_en")
  updatedAt   DateTime  @updatedAt @map("modificado_en")
  deletedAt   DateTime? @map("eliminado_en")

  jobPositionId String
  jobPosition   JobPosition @relation(fields: [jobPositionId], references: [id])

  @@map("mnt_requisito")
}

model JobApplication {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now()) @map("creado_en")
  updatedAt DateTime  @updatedAt @map("modificado_en")
  deletedAt DateTime? @map("eliminado_en")

  jobPositionId String      @unique @map("id_puesto_trabajo")
  jobPosition   JobPosition @relation(fields: [jobPositionId], references: [id])

  candidateId String?    @map("id_candidato")
  candidate   Candidate? @relation(fields: [candidateId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("mnt_aplicacion_puesto_trabajo")
}

model Company {
  id                String             @id @default(uuid())
  name              String             @map("nombre_empresa")
  description       String?            @map("descripcion_empresa") @db.NVarChar(MAX)
  sector            String?            @map("sector")
  size              String             @map("tamanio")
  website           String?            @map("sitio_web")
  phone             String?            @map("telefono_contacto")
  logo              String?            @map("logo_empresa")
  type              String?            @map("tipo_empresa") // startup, corporaci√≥n, ONG
  // A√±adir trigger que aumente el contador de usuarios asignados, cuando se asigne un usuario a la empresa
  assignedRecruiter Int?               @default(0) @map("usuarios_asignados")
  userId            String             @unique @map("id_usuario")
  user              User               @relation(fields: [userId], references: [id])
  countryId         String             @map("id_pais")
  country           Country            @relation(fields: [countryId], references: [id])
  recruiters        CompanyRecruiter[]
  jobPositions      JobPosition[]

  createdAt DateTime  @default(now()) @map("creado_en")
  updatedAt DateTime  @updatedAt @map("modificado_en")
  deletedAt DateTime? @map("eliminado_en")

  @@map("mnt_empresa")
}

model CompanyRecruiter {
  id          String    @id @default(uuid())
  companyId   String    @map("id_empresa")
  company     Company   @relation(fields: [companyId], references: [id])
  recruiterId String    @map("id_reclutador")
  recruiter   Recruiter @relation(fields: [recruiterId], references: [id])

  createdAt DateTime  @default(now()) @map("creado_en")
  updatedAt DateTime  @updatedAt @map("modificado_en")
  deletedAt DateTime? @map("eliminado_en")

  @@map("empresa_usuarios")
}
