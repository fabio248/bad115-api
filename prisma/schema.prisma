// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid())
  email        String    @unique @map("correo")
  password     String    @map("contrasena")
  isActive     Boolean   @default(true) @map("esta_activo")
  loginAttemps Int       @default(0) @map("intentos_login")
  createdAt    DateTime  @default(now()) @map("creado_en")
  updatedAt    DateTime  @updatedAt @map("modificado_en")
  deletedAt    DateTime? @map("eliminado_en")

  roles  UserRole[]
  person Person?

  @@map("mnt_usuario")
}

model UserRole {
  userId    String    @map("usuario_id")
  user      User      @relation(fields: [userId], references: [id])
  role      Role      @relation(fields: [roleId], references: [id])
  roleId    String    @map("rol_id")
  createdAt DateTime  @default(now()) @map("creado_en")
  updatedAt DateTime  @updatedAt @map("modificado_en")
  deletedAt DateTime? @map("eliminado_en")

  @@id([roleId, userId])
  @@map("mnt_usuario_rol")
}

model Role {
  id          String          @id @default(uuid())
  name        String          @unique @map("nombre")
  createdAt   DateTime        @default(now()) @map("creado_en")
  updatedAt   DateTime        @updatedAt @map("modificado_en")
  deletedAt   DateTime?       @map("eliminado_en")
  users       UserRole[]
  permissions RolPermission[]

  @@map("mnt_rol")
}

model RolPermission {
  roleId       String     @map("rol_id")
  role         Role       @relation(fields: [roleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId String     @map("permiso_id")
  createdAt    DateTime   @default(now()) @map("creado_en")
  updatedAt    DateTime   @updatedAt @map("modificado_en")
  deletedAt    DateTime?  @map("eliminado_en")

  @@id([roleId, permissionId])
  @@map("mnt_rol_permiso")
}

model Permission {
  id        String          @id @default(uuid())
  name      String          @map("nombre")
  codename  String          @map("codigo")
  createdAt DateTime        @default(now()) @map("creado_en")
  updatedAt DateTime        @updatedAt @map("modificado_en")
  deletedAt DateTime?       @map("eliminado_en")
  roles     RolPermission[]

  @@map("mnt_permiso")
}

model Person {
  id         String    @id @default(uuid())
  birthday   DateTime  @map("fecha_nacimiento")
  firstname  String    @map("primer_nombre")
  middleName String    @map("segundo_nombre")
  lastName   String    @map("primer_apellido")
  secondName String    @map("segundo_apellido")
  gender     String    @map("genero")
  phone      String    @map("telefono")
  createdAt  DateTime  @default(now()) @map("creado_en")
  updatedAt  DateTime  @updatedAt @map("modificado_en")
  deletedAt  DateTime? @map("eliminado_en")

  userId    String     @unique
  User      User       @relation(fields: [userId], references: [id])
  documents Document[]
  Address   Address[]

  @@map("mnt_persona")
}

model Document {
  // type contained four diferents values
  id        String    @id @default(uuid())
  personId  String    @map("persona_id")
  person    Person    @relation(fields: [personId], references: [id])
  type      String    @map("tipo")
  number    String    @map("numero")
  createdAt DateTime  @default(now()) @map("creado_en")
  updatedAt DateTime  @updatedAt @map("modificado_en")
  deletedAt DateTime? @map("eliminado_en")

  @@map("mnt_documento")
}

model Address {
  id          String    @id @default(uuid())
  street      String    @map("calle")
  numberHouse String    @map("numero_casa")
  createdAt   DateTime  @default(now()) @map("creado_en")
  updatedAt   DateTime  @updatedAt @map("modificado_en")
  deletedAt   DateTime? @map("eliminado_en")

  personId       String?
  Person         Person?      @relation(fields: [personId], references: [id])
  departmentId   String
  department     Department   @relation(fields: [departmentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  municipalityId String
  municipality   Municipality @relation(fields: [municipalityId], references: [id])

  @@map("mnt_direccion")
}

model Department {
  id        String    @id @default(uuid())
  name      String    @map("nombre")
  createdAt DateTime  @default(now()) @map("creado_en")
  updatedAt DateTime  @updatedAt @map("modificado_en")
  deletedAt DateTime? @map("eliminado_en")

  municipalities Municipality[]
  Address        Address[]

  @@map("ctl_departamento")
}

model Municipality {
  id        String    @id @default(uuid())
  name      String    @map("nombre")
  createdAt DateTime  @default(now()) @map("creado_en")
  updatedAt DateTime  @updatedAt @map("modificado_en")
  deletedAt DateTime? @map("eliminado_en")

  departmentId String
  Department   Department @relation(fields: [departmentId], references: [id])
  Address      Address[]

  @@map("ctl_municipio")
}
